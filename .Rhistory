reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of counties in each region")
barplot(reg, col = "wheat", main = "Number of counties in each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
west <- subset(pollution, region == "west")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot())
with(pollution, plot(latitude, pm25))
abline(12, lwd = 2, lty = 2)
abline(12)
abline(12)
abline(h = 12, lwd = 2, ldy = 2)
abline(h = 12, lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
(mfrow =
| c(1, 2), mar = c(5, 4, 2, 1))
(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(eruptions, wainting)
with(faithful, plot(eruptions, waiting))
title(main = "Old Fithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(x=mean(cars$speed), y = max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.exp ~ Income, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplt(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot()
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par)
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind)
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Ozone and Wind in NYC")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, month == "5")
may <- subset(airquality, Month == "5")
may <- subset(airquality, Month == 5)
plot(may$Wind, may$Ozone)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, !Month == 5)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,not$Ozone,col="red",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend(topright, pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
legend(topright, pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months")))
legend(topright, pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
legend(topright, pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
legend(topright, pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
legend("topright", pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = median(airquality$Wind), lty = 2 , lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main "=Ozone and Wind" )
plot(airquality$Wind, airquality$Ozone, main ="Ozone and Wind" )
plot(airquality$Ozone, airquality$Solar, main ="Ozone and Solar Radiation" )
plot(airquality$Ozone, airquality$Solar.R, main ="Ozone and Solar Radiation" )
par(mfrow = c(1, 3), mar = c(4, 4, 2,1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main ="Ozone and Wind" )
plot(airquality$Ozone, airquality$Solar.R, main ="Ozone and Solar Radiation" )
plot(airquality$Solar.R, airquality$Ozone, main ="Ozone and Solar Radiation" )
plot(airquality$Temp, airquality$Ozone, main ="Ozone and Temperature" )
mtext("Ozone and Weather in New York City", outer = TRUE)
quit()
getwd()
library(sw)
library(swirl)
swril()
swirl()
names(colors,10)
names(colors)
names(colors(), 10)
sample(colors(), 10)
pal <= colorRamp(c("red","blue"))
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0.1,len=6))
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red","blue"))
p1(2)
p1(seq(0,1,len=6))
p1(6)
0xcc
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
p1(20)[3]
showMe(p2(20))
View(showMe)
View(myImage)
View(showMe)
View(showMe)
View(showMe)
View(showMe)
View(showMe)
View(showMe)
View(showMe)
showMe(p2(2)))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue","green"), alpha = .5)
p3(5)
plot(x,y,pch = 19, col = c(0,.5,.5))
plot(x,y,pch = 19, col = rgb(0,.5,.5))
plot(x,y,pch = 19, col = rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, col = drv)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot() y = hwy, data = mpg, color = drv)
qplot( y = hwy, data = mpg, color = drv)
myhigh
qplot(drv,hwy, data = mpg, geom = c("boxplot"))
qplot(drv,hwy, data = mpg, geom = "boxplot")
qplot(drv,hwy, data = mpg, geom = "boxplot", color= manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2 )
qplot(displ, hwy, data = mpg, geom = c("smooth"), facets = .~drv, method = "loess")
qplot(displ, hwy, data = mpg, geom = c("point","smooth"), facets = .~drv, method = "loess")
qplot(displ, hwy, data = mpg, geom = c("point","smooth"), facets = .~drv, method = "loess")
qplot(displ, hwy, data = mpg, geom = c("point","smooth"), facets = .~drv)
g <- call(mpg, ggplot(displ, hwy))
g <- call("mpg", ggplot(displ, hwy))
g <- call(mpg, ggplot(displ, hwy))
g <- ggplot(displ, hwy, data = mpg)
g <- aes(displ, hwy, data = mpg)
ggplot(mpg, aes(displ,hwy) ) -> g
g
summary(g)
g+geom_point()
g+geom_point() + geom_smooth()
g+geom_point() + geom_smooth("lm")
g+geom_point() + geom_smooth( methode = "lm")
g+geom_point() + geom_smooth( method = "lm")
g+geom_point() + geom_smooth( method = "lm") + facet_grid(,~drv)
g+geom_point() + geom_smooth( method = "lm") + facet_grid(.~drv)
g+geom_point() + geom_smooth( method = "lm") + facet_grid(,~drv) + ggtilt
g+geom_point() + geom_smooth( method = "lm") + facet_grid(,~drv) + ggtitle("Swril Rules")
g+geom_point() + geom_smooth( method = "lm") + facet_grid(.~drv) + ggtitle("Swril Rules")
g+geom_point() + geom_smooth( method = "lm") + facet_grid(.~drv) + ggtitle("Swril Rules!")
g+geom_point() + geom_smooth( method = "lm") + facet_grid(.~drv) + ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 0.5)
g+geom_point(size = 4, alpha = 0.5, aes(drv))
g+geom_point(size = 4, alpha = 0.5, aes(color = drv))
g+geom_point(size = 4, alpha = 0.5, aes(color = drv)) + labs(title = "Swirl Rules!", x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
g+geom_point(size = 2, alpha = 0.5, aes(color = drv)) + geom_smooth(size = 4, linetype = 3, method = "lm", se = TRUE)
g+geom_point(size = 2, alpha = 0.5, aes(color = drv)) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g+geom_point(aes(color = drv) + theme_bw(base_family = )
g+geom_point(aes(color = drv) + theme_bw(base_family = "Times")
g+geom_point(aes(color = drv) + theme_bw(base_family = "Times")
)
g+geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line()
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() +facet_grid(drv~cyl, margins = TRUE)
g + geom_point() +facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = )
g + geom_point() +facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() +facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(caret, price, data = diamonds)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"), method = "lm")
qplot(carat, price, data = diamonds, color = cut, geom = (c("point", "smooth"), method = "lm")
qplot(carat, price, data = diamonds, color = cut, geom = c("point", "smooth"))
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm") + facet(.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets = .~cut) + geom_smooth(method="lm")
g <- ggplot(data = diamonds, ae(depth, price))
g <- ggplot(data = diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,4), na.rm = TRUE)
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
cutpoints
cutpoints <- quantile(diamonds$carat, seq(0,1,length = 4), na.rm = TRUE)
diamonds$cut2 <- cut(diamonds$carat, cutpoints)
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(data = diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 2, color - pink)
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 2, color = pink)
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 2, color = "pink")
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 0.5, color = "pink")
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?BodyWeight
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?datasets
library(help = "datasets")
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
g + geom_point()
library(ggplot2movies)
install.packages("ggplot2movies")
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
g + geom_point()
qplot(votes, rating, data = movies) + geom_smooth()
setwd("C:/Users/Guilherme/Desktop/Perspectivas em Estatística")
feature_names <- c("subject", "activity", as.character(features[[2]])) # creating the string vector with the variable names.
# This vector will be used in the next step.
train_dataset <- bind_cols(subject_train, y_train, X_train)  # assembling each dataset.
train_dataset <- setnames(train_dataset,  feature_names)
test_dataset <- bind_cols(subject_test, y_test, X_test)
test_dataset <- setnames(test_dataset,  feature_names)
dataset <- rbind(test_dataset , train_dataset)
open.files <- function() {
files <- list.files("./data")
print("Opening the following files: " , quote = F)
for ( document in files) {
tryCatch({
name.of.file = gsub(".txt", "", document)
print(document)
xx <- paste('./data/', document, sep = "")
assign(name.of.file, read.table(header = FALSE, stringsAsFactors = FALSE,  file = xx), envir=globalenv())
} , error=function(e){})
}
}
open.files()
feature_names <- c("subject", "activity", as.character(features[[2]])) # creating the string vector with the variable names.
# This vector will be used in the next step.
train_dataset <- bind_cols(subject_train, y_train, X_train)  # assembling each dataset.
train_dataset <- setnames(train_dataset,  feature_names)
test_dataset <- bind_cols(subject_test, y_test, X_test)
test_dataset <- setnames(test_dataset,  feature_names)
dataset <- rbind(test_dataset , train_dataset)
#These are the steps for creating the train data set.
library(dplyr)
library(tidyr)
library(data.table)
feature_names <- c("subject", "activity", as.character(features[[2]])) # creating the string vector with the variable names.
# This vector will be used in the next step.
train_dataset <- bind_cols(subject_train, y_train, X_train)  # assembling each dataset.
train_dataset <- setnames(train_dataset,  feature_names)
test_dataset <- bind_cols(subject_test, y_test, X_test)
test_dataset <- setnames(test_dataset,  feature_names)
dataset <- rbind(test_dataset , train_dataset)
View(dataset)
#### 2. Extracting only the mean and sd for each measurement ####
logi_col_extraction <- grepl('mean\\(\\)|std\\(\\)|subject|activity', feature_names) # creating a logical vector for subsetting the wanted
# columns from the feature_names vec with reg exp.
dataset <- dataset[ , logi_col_extraction]
#### 3. Replacing the number lables of the activity column for their descriptive names ####
vec_activity_lables <- as.character(activity_labels[[2]])
dataset$activity <- as.factor(dataset$activity)
levels(dataset$activity) <- vec_activity_lables
#### 4. Changing the names of the variables (columns) for more clarity ####
old.col.names <- names(dataset)
names.for.manipulation <- gsub('(^t|f)(.+)', '\\2 #\\1#', old.col.names, perl = TRUE) # a guide for placing the time/frequancy domain lables at the end of the string
names.for.manipulation <- sub("#t#", "- time domain", names.for.manipulation) # adding "time/ frequency domain" at the end of each corresponding string
names.for.manipulation <- sub("#f#", "- frequency domain", names.for.manipulation)
names.for.manipulation <- sub("BodyBody", "Body", names.for.manipulation) # an error appearing in some variable names
# the following code will eliminate some unused/unwanted characters from the variable names and reorder them for easier replacing
# and replaces a series of strings for a more descriptive version of them.
names.for.manipulation <- sub("(^.+)(mean|std)(\\(\\))(-*)(.+)(\\s*)(- time domain|- frequency domain)", "\\1#\\5#- \\2 \\7", names.for.manipulation)
names.for.manipulation <- sub("-#X #", " in the X axis ", names.for.manipulation)
names.for.manipulation <- sub("-#Y #", " in the Y axis ", names.for.manipulation)
names.for.manipulation <- sub("-#Z #", " in the Z axis ", names.for.manipulation)
names.for.manipulation <- sub("-# #", " ", names.for.manipulation)
names.for.manipulation <- sub("Mag", " - magnitude", names.for.manipulation)
names.for.manipulation <- sub("Jerk", " jerk signals", names.for.manipulation)
names.for.manipulation <- sub("Gyro", " angular velocity", names.for.manipulation)
names.for.manipulation <- sub("Acc", " acceleration", names.for.manipulation)
names.for.manipulation <- gsub(" |-", ".", names.for.manipulation)
names.for.manipulation <- gsub("\\.\\.\\.", ".", names.for.manipulation)
names(dataset) <- names.for.manipulation
#### 5. Creating an independent tidy data set with the average of each variable for each activity and each subject ####
avg.dataset <<- dataset %>% group_by(subject, activity) %>% summarise_each(funs(mean))
View(avg.dataset)
head(diamonds)
dim(diamonds)
head(airquality)
rankhospital <- function(state, outcome, num = "best") {
hosp_data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Getting the data ready, with the proper classes and column names
options(warn = -1) ## To avoid warn messages when converting the values
hosp_data[,c(11,17,23)] <- apply(hosp_data[,c(11,17,23)], 2, as.numeric)
hosp_data$State <- as.factor(hosp_data$State)
names(hosp_data)[c(11,17,23)] <- c("heart attack","heart failure","pneumonia")
options(warn = 0)
hosp_data <- hosp_data[c(2,7,11,17,23)]  ## All the data that matters
Shosp <- split(hosp_data, hosp_data$State)
intended <- Shosp[state][[1]] #selecting the intended state
nas <- is.na(intended[outcome])
intended <- intended[!nas,]  # Removing NAs
intended <- intended[order(intended[outcome], intended$Hospital.Name),] #Ordering the data Frame in outcome descending order
#intended <- intended[order(intended[outcome]),]
if(is.numeric(num)) {
print(na.exclude(intended[num,1]) )
}
if(num == "best") {
print(intended[1,1])
}
if(num == "worst" ) {
print(intended[dim(intended)[1],1])
}
}
rankhospital("NY", pneumonia)
rankhospital("NY", "penumonia")
rankhospital("NY", "penumonia", 4)
rankhospital("TX", "heart faliure", 4)
getwd()
hosp_data = read.csv("outcome-of-care-measures.csv", colClasses = "character")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 1)
rankhospital("TX", "heart failure", 10)
rankhospital("TX", "penumonia", 1:10)
rankhospital("TX", "pneumonia", 1:10)
rankhospital("NY", "pneumonia", 1:10)
rankhospital("MR", "pneumonia", 1:10)
source('C:/Users/Guilherme/Desktop/Perspectivas em Estatística/rankall.R')
rankall("pneumonia")
rankall("pneumonia", "worst")
rankall("pneumonia")
source('C:/Users/Guilherme/Desktop/Perspectivas em Estatística/rankall.R')
source('C:/Users/Guilherme/Desktop/Perspectivas em Estatística/rankhospital.R')
rankall("pneumonia", "worst")
rankall("heart failure", "worst")
rankall("heart failure", 4)
rankall("heart failure", 1:3)
rm(list = ls())
library(datasets)
str(airquality)
?airquality
airquality$Month
mean(airquality$Ozone)
mean(airquality$Ozone, na.rm = TRUE)
mean(airquality[Month = 5], na.rm = TRUE)
mean(airquality[Month = 5]$Ozone, na.rm = TRUE)
logico <- airquality$Month == 5
logico
mean(airquality[logico]$Ozone, na.rm = TRUE)
airquality[logico]
airquality[logico,]
dim(airquality[logico,])
table(logico)
mean(airquality[logico,]$Ozone, na.rm = TRUE)
mean(airquality[Month == 5,]$Ozone, na.rm = TRUE)
mean(airquality[Month == 5]$Ozone, na.rm = TRUE)
mean(airquality[logico,]$Ozone, na.rm = TRUE)
range(airquality$Wind)
summary(airquality$Wind)
logico <- airquality$Month == 5 & airquality$Wind < 18
logico
table(logico)
mean(airquality[logico,]$Ozone, na.rm = TRUE)
logico <- airquality$Month == 5
logico2 <- airquality$Month == 5 & airquality$Wind < 18
mean(airquality[logico2,]$Ozone, na.rm = TRUE)
mean(airquality[logico1,]$Ozone, na.rm = TRUE)
mean(airquality[logico,]$Ozone, na.rm = TRUE)
table(airquality$Temp, airquality$Ozone)
table(airquality$Month, airquality$Ozone)
table(as.factor(airquality$Month), airquality$Ozone)
range(airquality$Temp)
quantile(airquality$Temp)
quantile(airquality$Temp)
seq(0,1,length = 4)
quantile( airqualitu,seq(0,1,length = 4)
quantile( airquality$Temp ,seq(0,1,length = 4), na.rm = TRUE)
quantile( airquality$Temp ,seq(0,1,length = 4), na.rm = TRUE)
quantile( airquality$Temp ,seq(0,1,length = 5), na.rm = TRUE)
quantile( airquality$Temp ,seq(0,1,length = 22), na.rm = TRUE)
quantile( airquality$Temp ,seq(0,1,length = 5), na.rm = TRUE)
quantile( airquality$Temp ,seq(0,1,length = 5), na.rm = TRUE) -> pontos.de.corte
airquality$Temp.quantil <- cut(airquality$Temp, pontos.de.corte)
head(airquality)
table(aiqualit)
pontos.de.corte
table(aiquali)
table(airquality$Ozone, airquality$Temp.quantil)
quantile( airquality$Ozone ,seq(0,1,length = 5), na.rm = TRUE) -> pontos.de.corte.ozone
quantile( airquality$Temp ,seq(0,1,length = 5), na.rm = TRUE) -> pontos.de.corte.temperatura
quantile( airquality$Temp ,seq(0,1,length = 5), na.rm = TRUE) -> pontos.de.corte.temperatura
quantile( airquality$Ozone ,seq(0,1,length = 5), na.rm = TRUE) -> pontos.de.corte.ozone
airquality$Temp.quantil <- cut(airquality$Temp, pontos.de.corte.temperatura)
airquality$Temp.ozone <- cut(airquality$Ozone, pontos.de.corte.ozone)
airquality$Ozone.quantil <- cut(airquality$Ozone, pontos.de.corte.ozone)
table(airquality$Ozone.quantil, airquality$Temp.quantil)
?table
table(airquality$Ozone.quantil, airquality$Temp.quantil, row.names = "ozone")
table(airquality$Ozone.quantil, airquality$Temp.quantil)
table(airquality$Ozone.quantil, airquality$Temp.quantil) -> x
names(x)
names(x) <- c("Ozone", "Temperatura")
x
table(ozne)
table(airquality$Ozone)
table(airquality$Ozone.quantil)
table(is.na(airquality$Temp.ozone))
sum(table(airquality$Ozone.quantil))
table(airquality$Ozone.quantil, airquality$Temp.quantil, useNA = TRUE)
table(airquality$Ozone.quantil, airquality$Temp.quantil, useNA)
table(airquality$Ozone.quantil, airquality$Temp.quantil, useNA = NA)
table(airquality$Ozone.quantil, airquality$Temp.quantil)
table(airquality$Ozone.quantil, airquality$Temp.quantil, useNA = "min")
table(airquality$Ozone.quantil, airquality$Temp.quantil, useNA = "ifany")
table(airquality$Ozone.quantil, airquality$Temp.quantil > 79, useNA = "ifany")
table(airquality$Ozone.quantil, airquality$Temp.quantil > 70, useNA = "ifany")
table(airquality$Ozone.quantil, airquality$Temp.quantil > 30, useNA = "ifany")
install.packages(c("datasets", "dplyr", "tidyr", "data.table", "ggplot2"))
install.packages(c("datasets", "dplyr", "tidyr", "data.table",
)
)
install.packages(c("datasets", "dplyr", "tidyr", "data.table", "ggplot2"))
install.packages(c("datasets", "dplyr", "tidyr", "data.table",
)
)
install.packages(c("datasets", "dplyr", "tidyr", "data.table", "ggplot2"))
install.packages(c("datasets", "dplyr", "tidyr", "data.table",
install.packages(c("datasets", "dplyr", "tidyr", "data.table", "ggplot2"))
install.packages(c("datasets", "dplyr", "tidyr", "data.table", "ggplot2"))
install.packages(c("datasets", "dplyr", "tidyr", "data.table", "ggplot2"))
install.packages(c("datasets", "dplyr", "tidyr", "data.table",
)
)
