mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swril()
swirl()
library(dplyr)
tbl_df(mydf) -> cran
rm("mydf")
cran
?group_by
group_by(cran, package)
group_by(cran, package) -> by_package
bby_package]
bby_package
by_package
summarise(by_package, mean(size))
?n
?n_distinct
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
filter(pack_sum, count > 679) -> top_counts
top_counts
view(top_counts)
View(top_counts)
arrange(top_counts, desc(count))
arrange(top_counts, desc(count)) -> top_counts_sorted
View(top_counts_sorted)
quantile
quantile(pack_sum$unique, probs=0.99)
filter(pack_sum, unique > 465)-> top_unique
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count ,  - grade)
students2
res <- gather(students2, sex_class, count ,  - grade)
res
?separate
?gather_
separate(res, sex_class, c(sex, class))
separate(res, sex_class, c('sex', 'class'))
submit()
students3
?gather
submit()
?spread
submit()
students3
submit()
submit()
submit()
extract_numeric("class5")
submit()
students4
submit()
submit()
?unique
?unique
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, passed = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
?bind_rows
bind_rows(passed,failed)
sat
?contains
?contains
??contains
submit()
?select
submit()
submit()
submit()
tidy <- read.csv2("C:/Users/Guilherme/Desktop/Data Science JHU/Getting and Cleaning Data/Course Project/Student Review/tidy.txt", sep="")
View(tidy)
tidy$Subject
tidy2 <- read.csv2("C:/Users/Guilherme/Desktop/Data Science JHU/Getting and Cleaning Data/Course Project/Student Review/tidy.txt", sep="")
View(tidy2)
tidy_data <- read.csv("C:/Users/Guilherme/Desktop/Data Science JHU/Getting and Cleaning Data/Course Project/Student Review/tidy_data.txt", sep="")
View(tidy_data)
TidyData <- read.csv("C:/Users/Guilherme/Desktop/Data Science JHU/Getting and Cleaning Data/Course Project/Student Review/TidyData.txt", sep="")
View(TidyData)
`tidydata.(1)` <- read.delim("C:/Users/Guilherme/Desktop/Data Science JHU/Getting and Cleaning Data/Course Project/Student Review/tidydata (1).txt")
View(`tidydata.(1)`)
View(TidyData)
View(`tidydata.(1)`)
library(swril)
library(swirl)
swril()
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
quit
quit()
swril()
library(swirl)
swirl()
install.packages("ggplot2")
swril()
swirl()
install.packages("ggplot2")
swril()
swirl()
head(pollution)
dim
dim(pollution)
summary(pollution$pm25)
pollution$pm25 -> ppm
quantile(ppm)
boxplot(ppm, col = "Blue")
boxplot(ppm, col = "blue")
abline(h = 12)
hist(ppm)
hist(ppm, col = "green")
rug(ppm)
low
high
hist(ppm, col = "green", breaks = 100)
rug(ppm\)
rug(ppm)
hist(ppm, col = "green")
abline(v = 2 , lwd = 2)
abline(v = 12 , lwd = 2)
abline(v = 12 , lwd = 4, col = "magenta")
abline(v = median(ppm) , lwd = 4, col = "magenta")
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of counties in each region")
barplot(reg, col = "wheat", main = "Number of counties in each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col = "green")
west <- subset(pollution, region == "west")
hist(subset(pollution, region == "west")$pm25, col = "green")
with(pollution, plot())
with(pollution, plot(latitude, pm25))
abline(12, lwd = 2, lty = 2)
abline(12)
abline(12)
abline(h = 12, lwd = 2, ldy = 2)
abline(h = 12, lwd = 2, lty = 2)
abline(h = 12, lwd = 2, lty = 2)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h = 12, lwd = 2, lty = 2)
(mfrow =
| c(1, 2), mar = c(5, 4, 2, 1))
(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
plot(eruptions, wainting)
with(faithful, plot(eruptions, waiting))
title(main = "Old Fithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(x=mean(cars$speed), y = max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.exp ~ Income, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplt(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot()
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par)
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind)
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Ozone and Wind in NYC")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, month == "5")
may <- subset(airquality, Month == "5")
may <- subset(airquality, Month == 5)
plot(may$Wind, may$Ozone)
points(may$Wind,may$Ozone,col="blue",pch=17)
notmay <- subset(airquality, !Month == 5)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind,not$Ozone,col="red",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=17)
points(notmay$Wind,notmay$Ozone,col="red",pch=8)
legend(topright, pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
legend(topright, pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months")))
legend(topright, pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
legend(topright, pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
legend(topright, pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
legend("topright", pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = median(airquality$Wind), lty = 2 , lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main "=Ozone and Wind" )
plot(airquality$Wind, airquality$Ozone, main ="Ozone and Wind" )
plot(airquality$Ozone, airquality$Solar, main ="Ozone and Solar Radiation" )
plot(airquality$Ozone, airquality$Solar.R, main ="Ozone and Solar Radiation" )
par(mfrow = c(1, 3), mar = c(4, 4, 2,1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main ="Ozone and Wind" )
plot(airquality$Ozone, airquality$Solar.R, main ="Ozone and Solar Radiation" )
plot(airquality$Solar.R, airquality$Ozone, main ="Ozone and Solar Radiation" )
plot(airquality$Temp, airquality$Ozone, main ="Ozone and Temperature" )
mtext("Ozone and Weather in New York City", outer = TRUE)
quit()
getwd()
library(datasets)
library(ggplot2)
g <- ggplot(airquality, aes(Ozone,Temp))
g + geom_point()
g <- ggplot(airquality, aes(Temp,Ozone))
g + geom_point()
g + geom_point(size = 4) + facet_grid()
g + geom_point(size = 4)
g + geom_point(size = 3)
g + geom_point(size = 2)
g + geom_point(size = 4)
g + geom_point(size = 2.5)
g + geom_point(size = 2.5, color = "blue")
g + geom_point(size = 2.5)
quantile( airquality$Temp ,seq(0,1,length = 5), na.rm = TRUE) -> pontos.de.corte.temperatura
quantile( airquality$Ozone ,seq(0,1,length = 5), na.rm = TRUE) -> pontos.de.corte.ozone
airquality$Temp.quantil <- cut(airquality$Temp, pontos.de.corte.temperatura)
airquality$Ozone.quantil <- cut(airquality$Ozone, pontos.de.corte.ozone)
g <- ggplot(airquality, aes(Ozone,Temp))
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue")
g <- ggplot(airquality, aes(Wind,Ozone))
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facets(,~Temp.quantil)
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facet_grid(,~Temp.quantil)
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facet_grid(,~Temp.quantil,)
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facet_grid(.~Temp.quantil)
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue")
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facet_grid(.~Temp.quantil)
g + geom_point(size = 2.5)
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue")
g + geom_point(size = 2.5) + geom_smooth()
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue")
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facet_grid(.~Temp.quantil)
months()
month
month()
months
month.name
month.name[5Ã‡9]
month.name[5:9]
month.name[5:9]
aiqrualit
aiqruality$month
airquality$month
unique(airquality$Month)
airquality$Month <- as.factors(airquality$Month)
airquality$Month <- as.factor(airquality$Month)
levels(airquality$Month)
levels(airquality$Month) <- month.name[5:9]
airquality$Month
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facet_grid(Month.~Temp.quantil)
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facet_grid(Month~Temp.quantil)
g <- ggplot(airquality, aes(Wind,Ozone))
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facet_grid(Month~Temp.quantil)
g + geom_point(size = 2.5)
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue")
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facet_grid(.~Temp.quantil)
getwd()
g + geom_point(size = 2.5) + geom_smooth(method = "lm", color = "blue") + facet_grid(Month~Temp.quantil)
str(diamonds)
qqplot(price, data = diamonds)
qqplot(price, data = diamonds)
qqplot(price, data = diamonds)
qplot(price, data = diamonds)
qplot(price, data = diamonds, bin = 0.3)
qplot(price, data = diamonds, binwidth = 0.3)
qplot(price, data = diamonds, binwidth = 1000)
qplot(price, data = diamonds, binwidth = 500)
qplot(price, data = diamonds, binwidth = 100)
qplot(price, data = diamonds)
qplot(price, data = diamonds, geom = c("density"))
qplot(price, data = diamonds, geom = c("density"), facets = cut)
qplot(price, data = diamonds, geom = c("density"), facets = cut)
qplot(price, data = diamonds, geom = c("density"), facets = .~cut)
qplot(price, data = diamonds, geom = c("density"), colors = cut
)
qplot(price, data = diamonds, geom = c("density"), color = cut)
qplot(carat, price, data = diamonds, geom = c("density"), colors = cut
)
qplot(carat, price, data = diamonds, geom = c("density"), color = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth()
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, ylim = c(0, 20000)) + geom_smooth(method = "lm")
qplot(price, data = diamonds)
qplot(price, data = diamonds, geom = c("density"))
qplot(price, data = diamonds, geom = c("density"), color = cut)
qplot(carat, price, data = diamonds, color = cut, ylim = c(0, 20000))
qplot(carat, price, data = diamonds, color = cut, ylim = c(0, 20000)) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, ylim = c(0, 20000)) + geom_smooth(method = "lm", size = 4)
qplot(carat, price, data = diamonds, color = cut, ylim = c(0, 20000)) + geom_smooth(method = "lm", size = 3)
source('C:/Users/Guilherme/Desktop/Perspectivas em EstatÃ­stica/read_data.R')
source('C:/Users/Guilherme/Desktop/Perspectivas em EstatÃ­stica/read_data.R')
d
setwd("C:/Users/Guilherme/Desktop/Perspectivas em EstatÃ­stica")
}
open.files <- function() {
files <- list.files("./data")
print("Opening the following files: " , quote = F)
for ( document in files) {
tryCatch({
name.of.file = gsub(".txt", "", document)
print(document)
xx <- paste('./data/', document, sep = "")
assign(name.of.file, read.table(header = FALSE, stringsAsFactors = FALSE,  file = xx), envir=globalenv())
} , error=function(e){})
}
}
open.files()
View(X_test)
#These are the steps for creating the train data set.
library(dplyr)
library(tidyr)
library(data.table)
#### 1. merging the train and test data set #####
feature_names <- c("subject", "activity", as.character(features[[2]])) # creating the string vector with the variable names.
# This vector will be used in the next step.
train_dataset <- bind_cols(subject_train, y_train, X_train)  # assembling each dataset.
train_dataset <- setnames(train_dataset,  feature_names)
test_dataset <- bind_cols(subject_test, y_test, X_test)
test_dataset <- setnames(test_dataset,  feature_names)
dataset <- rbind(test_dataset , train_dataset)
#### 2. Extracting only the mean and sd for each measurement ####
logi_col_extraction <- grepl('mean\\(\\)|std\\(\\)|subject|activity', feature_names) # creating a logical vector for subsetting the wanted
# columns from the feature_names vec with reg exp.
dataset <- dataset[ , logi_col_extraction]
#### 3. Replacing the number lables of the activity column for their descriptive names ####
vec_activity_lables <- as.character(activity_labels[[2]])
dataset$activity <- as.factor(dataset$activity)
levels(dataset$activity) <- vec_activity_lables
#### 4. Changing the names of the variables (columns) for more clarity ####
old.col.names <- names(dataset)
names.for.manipulation <- gsub('(^t|f)(.+)', '\\2 #\\1#', old.col.names, perl = TRUE) # a guide for placing the time/frequancy domain lables at the end of the string
names.for.manipulation <- sub("#t#", "- time domain", names.for.manipulation) # adding "time/ frequency domain" at the end of each corresponding string
names.for.manipulation <- sub("#f#", "- frequency domain", names.for.manipulation)
names.for.manipulation <- sub("BodyBody", "Body", names.for.manipulation) # an error appearing in some variable names
# the following code will eliminate some unused/unwanted characters from the variable names and reorder them for easier replacing
# and replaces a series of strings for a more descriptive version of them.
names.for.manipulation <- sub("(^.+)(mean|std)(\\(\\))(-*)(.+)(\\s*)(- time domain|- frequency domain)", "\\1#\\5#- \\2 \\7", names.for.manipulation)
names.for.manipulation <- sub("-#X #", " in the X axis ", names.for.manipulation)
names.for.manipulation <- sub("-#Y #", " in the Y axis ", names.for.manipulation)
names.for.manipulation <- sub("-#Z #", " in the Z axis ", names.for.manipulation)
names.for.manipulation <- sub("-# #", " ", names.for.manipulation)
names.for.manipulation <- sub("Mag", " - magnitude", names.for.manipulation)
names.for.manipulation <- sub("Jerk", " jerk signals", names.for.manipulation)
names.for.manipulation <- sub("Gyro", " angular velocity", names.for.manipulation)
names.for.manipulation <- sub("Acc", " acceleration", names.for.manipulation)
names.for.manipulation <- gsub(" |-", ".", names.for.manipulation)
names.for.manipulation <- gsub("\\.\\.\\.", ".", names.for.manipulation)
names(dataset) <- names.for.manipulation
#### 5. Creating an independent tidy data set with the average of each variable for each activity and each subject ####
avg.dataset <<- dataset %>% group_by(subject, activity) %>% summarise_each(funs(mean))
write.table(avg.dataset, file = "./tidy_dataset.txt", row.names = FALSE)
View(avg.dataset)
rankall <- function(outcome, num = "best") {
rankall <- function(outcome, num = "best") {
hosp_data = read.csv("./data/outcome-of-care-measures.csv", colClasses = "character")
## Getting the data ready, with the proper classes and column names
options(warn = -1) ## To avoid warn messages when converting the values
hosp_data[,c(11,17,23)] <- apply(hosp_data[,c(11,17,23)], 2, as.numeric)
hosp_data$State <- as.factor(hosp_data$State)
names(hosp_data)[c(11,17,23)] <- c("heart attack","heart failure","pneumonia")
options(warn = 0)
hosp_data <- hosp_data[c(2,7,11,17,23)]  ## All the data that matters
nas <- is.na(hosp_data[outcome])
hosp_data <- hosp_data[!nas,] # Removing NAs
hosp_data <- hosp_data[order(hosp_data[outcome], hosp_data$Hospital.Name),] #Ordering the data Frame in outcome descending order
Shosp <- split(hosp_data, hosp_data$State) # Creating a list per state
rank_opt <- function(intended) {  ##This function returns the intended rank as requested by the user
if(is.numeric(num)) {
return(intended[c(1,2)][num,])
}
if(num == "best") {
return(intended[c(1,2)][1,])
}
if(num == "worst" ) {
return(intended[c(1,2)][dim(intended)[1],])
}
}
hp_rank <- lapply(Shosp, rank_opt)
return(do.call(rbind,hp_rank))
}
rankall <- function(outcome, num = "best") {
hosp_data = read.csv("./data/outcome-of-care-measures.csv", colClasses = "character")
## Getting the data ready, with the proper classes and column names
options(warn = -1) ## To avoid warn messages when converting the values
hosp_data[,c(11,17,23)] <- apply(hosp_data[,c(11,17,23)], 2, as.numeric)
hosp_data$State <- as.factor(hosp_data$State)
names(hosp_data)[c(11,17,23)] <- c("heart attack","heart failure","pneumonia")
options(warn = 0)
hosp_data <- hosp_data[c(2,7,11,17,23)]  ## All the data that matters
nas <- is.na(hosp_data[outcome])
hosp_data <- hosp_data[!nas,] # Removing NAs
hosp_data <- hosp_data[order(hosp_data[outcome], hosp_data$Hospital.Name),] #Ordering the data Frame in outcome descending order
Shosp <- split(hosp_data, hosp_data$State) # Creating a list per state
rank_opt <- function(intended) {  ##This function returns the intended rank as requested by the user
if(is.numeric(num)) {
return(intended[c(1,2)][num,])
}
if(num == "best") {
return(intended[c(1,2)][1,])
}
if(num == "worst" ) {
return(intended[c(1,2)][dim(intended)[1],])
}
}
hp_rank <- lapply(Shosp, rank_opt)
return(do.call(rbind,hp_rank))
}
)
rankall("pneumonia")
rankall("pneumonia")
rankall <- function(outcome, num = "best") {
hosp_data = read.csv("./data/outcome-of-care-measures.csv", colClasses = "character")
## Getting the data ready, with the proper classes and column names
options(warn = -1) ## To avoid warn messages when converting the values
hosp_data[,c(11,17,23)] <- apply(hosp_data[,c(11,17,23)], 2, as.numeric)
hosp_data$State <- as.factor(hosp_data$State)
names(hosp_data)[c(11,17,23)] <- c("heart attack","heart failure","pneumonia")
options(warn = 0)
hosp_data <- hosp_data[c(2,7,11,17,23)]  ## All the data that matters
nas <- is.na(hosp_data[outcome])
hosp_data <- hosp_data[!nas,] # Removing NAs
hosp_data <- hosp_data[order(hosp_data[outcome], hosp_data$Hospital.Name),] #Ordering the data Frame in outcome descending order
Shosp <- split(hosp_data, hosp_data$State) # Creating a list per state
rank_opt <- function(intended) {  ##This function returns the intended rank as requested by the user
if(is.numeric(num)) {
return(intended[c(1,2)][num,])
}
if(num == "best") {
return(intended[c(1,2)][1,])
}
if(num == "worst" ) {
return(intended[c(1,2)][dim(intended)[1],])
}
}
hp_rank <- lapply(Shosp, rank_opt)
return(do.call(rbind,hp_rank))
}
rankall("pneumonia")
rankall("heart failure")
